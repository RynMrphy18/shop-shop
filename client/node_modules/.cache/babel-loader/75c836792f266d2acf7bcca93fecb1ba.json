{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rmurp\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif'; // import { useStoreContext } from '../../utils/GlobalState';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductList() {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then(products => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/Users/rmurp/Desktop/projects/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","useDispatch","useSelector","UPDATE_PRODUCTS","idbPromise","ProductList","dispatch","state","currentCategory","loading","data","type","products","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,WAAT,GAAuB;AAEvB;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,KAAK,GAAGL,WAAW,CAACK,KAAK,IAAGA,KAAT,CAAzB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,KAA5B;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBb,QAAQ,CAACE,cAAD,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAJ,EAAU;AACRJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAER,eADC;AAEPS,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFR,OAAD,CAAR;AAKAF,MAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAa;AACjCV,QAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,EAAoBU,OAApB,CAAV;AACG,OAFL;AAGD,KATD,MASO,IAAI,CAACL,OAAL,EAAc;AACnBL,MAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,CAAV,CAA8BW,IAA9B,CAAoCH,QAAD,IAAc;AAC/CN,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAER,eADC;AAEPS,UAAAA,QAAQ,EAAEA;AAFH,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAlBQ,EAkBN,CAACF,IAAD,EAAOD,OAAP,EAAgBH,QAAhB,CAlBM,CAAT;;AAoBA,WAASU,cAAT,GAA0B;AACxB,QAAI,CAACR,eAAL,EAAsB;AACpB,aAAOD,KAAK,CAACK,QAAb;AACD;;AAED,WAAOL,KAAK,CAACK,QAAN,CAAeK,MAAf,CAAsBH,OAAO,IAAIA,OAAO,CAACI,QAAR,CAAiBC,GAAjB,KAAyBX,eAA1D,CAAP;AACD;;AAGC,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGD,KAAK,CAACK,QAAN,CAAeQ,MAAf,gBACC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,cAAc,GAAGK,GAAjB,CAAsBP,OAAD,iBACpB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACK,GADf;AAEE,IAAA,GAAG,EAAEL,OAAO,CAACK,GAFf;AAGE,IAAA,KAAK,EAAEL,OAAO,CAACQ,KAHjB;AAIE,IAAA,IAAI,EAAER,OAAO,CAACS,IAJhB;AAKE,IAAA,KAAK,EAAET,OAAO,CAACU,KALjB;AAME,IAAA,QAAQ,EAAEV,OAAO,CAACW,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADD,gBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAhBJ,EAkBGhB,OAAO,gBAAG;AAAK,IAAA,GAAG,EAAET,OAAV;AAAmB,IAAA,GAAG,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyC,IAlBnD,CADF;AAsBD;;AAED,eAAeK,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductList() {\n\n// const [state, dispatch] = useStoreContext();\nconst dispatch = useDispatch();\nconst state = useSelector(state=> state);\n\nconst { currentCategory } = state;\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\nuseEffect(() => {\n  if (data) {\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n\n    data.products.forEach((product) => {\n      idbPromise('products', 'put', product);\n        });\n  } else if (!loading) {\n    idbPromise('products', 'get').then((products) => {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      });\n    });\n  }\n}, [data, loading, dispatch]);\n\nfunction filterProducts() {\n  if (!currentCategory) {\n    return state.products;\n  }\n\n  return state.products.filter(product => product.category._id === currentCategory);\n}\n\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}