{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rmurp\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\CategoryMenu\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries'; // import { useStoreContext } from '../../utils/GlobalState';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const categories = useSelector(state => state.categories);\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["C:/Users/rmurp/Desktop/projects/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","useDispatch","useSelector","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","CategoryMenu","dispatch","categories","state","loading","data","categoryData","handleClick","id","type","currentCategory","forEach","category","then","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,YAAT,GAAwB;AAEtB;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,UAAU,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,UAAhB,CAA9B;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCb,QAAQ,CAACC,gBAAD,CAAhD;;AAEA,QAAMa,WAAW,GAAGC,EAAE,IAAI;AACxBP,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEX,uBADC;AAEPY,MAAAA,eAAe,EAAEF;AAFV,KAAD,CAAR;AAID,GALD;;AAOAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,YAAJ,EAAkB;AAChBL,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEZ,iBADC;AAEPK,QAAAA,UAAU,EAAEI,YAAY,CAACJ;AAFlB,OAAD,CAAR;AAIAI,MAAAA,YAAY,CAACJ,UAAb,CAAwBS,OAAxB,CAAgCC,QAAQ,IAAI;AAC1Cb,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBa,QAAtB,CAAV;AACD,OAFD;AAGD,KARD,MAQO,IAAG,CAACR,OAAJ,EAAa;AAClBL,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCc,IAAhC,CAAqCX,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPQ,UAAAA,IAAI,EAAEZ,iBADC;AAEPK,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAjBQ,EAiBN,CAACI,YAAD,EAAeF,OAAf,EAAwBH,QAAxB,CAjBM,CAAT;AAmBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGC,UAAU,CAACY,GAAX,CAAgBC,IAAD,iBACd;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbT,MAAAA,WAAW,CAACQ,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAejB,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const categories = useSelector(state => state.categories);\n    \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if(!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}